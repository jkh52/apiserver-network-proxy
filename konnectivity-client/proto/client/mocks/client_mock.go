/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/apiserver-network-proxy/konnectivity-client/proto/client (interfaces: ProxyService_ProxyServer)

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
	client "sigs.k8s.io/apiserver-network-proxy/konnectivity-client/proto/client"
)

// MockProxyService_ProxyServer is a mock of ProxyService_ProxyServer interface.
type MockProxyService_ProxyServer struct {
	ctrl     *gomock.Controller
	recorder *MockProxyService_ProxyServerMockRecorder
}

// MockProxyService_ProxyServerMockRecorder is the mock recorder for MockProxyService_ProxyServer.
type MockProxyService_ProxyServerMockRecorder struct {
	mock *MockProxyService_ProxyServer
}

// NewMockProxyService_ProxyServer creates a new mock instance.
func NewMockProxyService_ProxyServer(ctrl *gomock.Controller) *MockProxyService_ProxyServer {
	mock := &MockProxyService_ProxyServer{ctrl: ctrl}
	mock.recorder = &MockProxyService_ProxyServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxyService_ProxyServer) EXPECT() *MockProxyService_ProxyServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockProxyService_ProxyServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockProxyService_ProxyServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockProxyService_ProxyServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockProxyService_ProxyServer) Recv() (*client.Packet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*client.Packet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockProxyService_ProxyServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockProxyService_ProxyServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockProxyService_ProxyServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockProxyService_ProxyServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockProxyService_ProxyServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockProxyService_ProxyServer) Send(arg0 *client.Packet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockProxyService_ProxyServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockProxyService_ProxyServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockProxyService_ProxyServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockProxyService_ProxyServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockProxyService_ProxyServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockProxyService_ProxyServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockProxyService_ProxyServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockProxyService_ProxyServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockProxyService_ProxyServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockProxyService_ProxyServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockProxyService_ProxyServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockProxyService_ProxyServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockProxyService_ProxyServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockProxyService_ProxyServer)(nil).SetTrailer), arg0)
}
